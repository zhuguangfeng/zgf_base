// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"zyz_jike/search/events"
	"zyz_jike/search/grpc"
	"zyz_jike/search/ioc"
	"zyz_jike/search/repository"
	"zyz_jike/search/repository/dao"
	"zyz_jike/search/service"
)

// Injectors from wire.go:

func Init() *App {
	client := ioc.InitEsClient()
	userDao := dao.NewUserElasticDao(client)
	userRepository := repository.NewUserRepository(userDao)
	articleDao := dao.NewArticleElasticDao(client)
	articleRepository := repository.NewArticleRepository(articleDao)
	syncService := service.NewSyncService(userRepository, articleRepository)
	syncServiceServer := grpc.NewSyncServiceServer(syncService)
	searchService := service.NewSearchService(userRepository, articleRepository)
	searchServiceServer := grpc.NewSearchService(searchService)
	clientv3Client := ioc.InitEtcdClient()
	logger := ioc.InitLogger()
	server := ioc.InitGrpcxServer(syncServiceServer, searchServiceServer, clientv3Client, logger)
	saramaClient := ioc.InitKafka()
	articleConsumer := events.NewArticleConsumer(syncService, saramaClient, logger)
	v := ioc.NewConsumers(articleConsumer)
	app := &App{
		server:    server,
		consumers: v,
	}
	return app
}

// wire.go:

var serviceProviderSet = wire.NewSet(dao.NewUserElasticDao, dao.NewArticleElasticDao, repository.NewUserRepository, repository.NewArticleRepository, service.NewSyncService, service.NewSearchService)

var thirdProvider = wire.NewSet(ioc.InitEsClient, ioc.InitEtcdClient, ioc.InitLogger, ioc.InitKafka)
