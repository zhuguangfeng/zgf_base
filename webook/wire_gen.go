// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"webook/internal/events/dynamic"
	"webook/internal/repository"
	"webook/internal/repository/cache"
	"webook/internal/repository/dao"
	"webook/internal/service"
	dynamic2 "webook/internal/web/dynamic"
	"webook/ioc"
)

// Injectors from wire.go:

func InitWebService() *App {
	cmdable := ioc.InitRedis()
	v := ioc.InitGinMiddleware(cmdable)
	db := ioc.InitDB()
	dynamicDao := dao.NewDynamicDao(db)
	client := ioc.InitEsClient()
	dynamicEsDao := dao.NewOlivereDynamicEsDao(client)
	dynamicCache := cache.NewDynamicCache(cmdable)
	logger := ioc.InitLogger()
	dynamicRepository := repository.NewDynamicRepository(dynamicDao, dynamicEsDao, dynamicCache, logger)
	saramaClient := ioc.InitKafka()
	syncProducer := ioc.InitSaramaSyncProducer(saramaClient)
	producer := dynamic.NewSaramaProducer(syncProducer)
	dynamicService := service.NewDynamicService(dynamicRepository, producer, logger)
	iDynamicV1 := dynamic2.NewDynamicHandlerV1(dynamicService, logger)
	engine := ioc.InitWebServer(v, iDynamicV1)
	dynamicConsumer := dynamic.NewDynamicConsumer(saramaClient, logger, dynamicRepository)
	v2 := ioc.NewConsumers(dynamicConsumer)
	app := &App{
		server:    engine,
		consumers: v2,
	}
	return app
}
